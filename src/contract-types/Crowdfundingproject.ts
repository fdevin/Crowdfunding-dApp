/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from "./common";

export interface CrowdfundingprojectInterface extends utils.Interface {
  functions: {
    "getCosts()": FunctionFragment;
    "getStocks()": FunctionFragment;
    "goalAmount()": FunctionFragment;
    "makeDonation(uint256)": FunctionFragment;
    "projDescription()": FunctionFragment;
    "projTitle()": FunctionFragment;
    "raisedAmount()": FunctionFragment;
    "transactionFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCosts"
      | "getStocks"
      | "goalAmount"
      | "makeDonation"
      | "projDescription"
      | "projTitle"
      | "raisedAmount"
      | "transactionFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getCosts", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStocks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "goalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeDonation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "projDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "projTitle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raisedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getCosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goalAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raisedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionFee",
    data: BytesLike
  ): Result;

  events: {
    "Funded(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
}

export interface FundedEventObject {
  donor: string;
  totalAmount: BigNumber;
  option: BigNumber;
  calculatedFeeAmount: BigNumber;
  donationAmount: BigNumber;
  timestamp: BigNumber;
}
export type FundedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  FundedEventObject
>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export interface Crowdfundingproject extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfundingprojectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCosts(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { c: BigNumber[] }>;

    getStocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { s: BigNumber[] }>;

    goalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeDonation(
      option: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projDescription(overrides?: CallOverrides): Promise<[string]>;

    projTitle(overrides?: CallOverrides): Promise<[string]>;

    raisedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactionFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getCosts(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStocks(overrides?: CallOverrides): Promise<BigNumber[]>;

  goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  makeDonation(
    option: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projDescription(overrides?: CallOverrides): Promise<string>;

  projTitle(overrides?: CallOverrides): Promise<string>;

  raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getCosts(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStocks(overrides?: CallOverrides): Promise<BigNumber[]>;

    goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    makeDonation(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    projDescription(overrides?: CallOverrides): Promise<string>;

    projTitle(overrides?: CallOverrides): Promise<string>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Funded(address,uint256,uint256,uint256,uint256,uint256)"(
      donor?: PromiseOrValue<string> | null,
      totalAmount?: PromiseOrValue<BigNumberish> | null,
      option?: PromiseOrValue<BigNumberish> | null,
      calculatedFeeAmount?: null,
      donationAmount?: null,
      timestamp?: null
    ): FundedEventFilter;
    Funded(
      donor?: PromiseOrValue<string> | null,
      totalAmount?: PromiseOrValue<BigNumberish> | null,
      option?: PromiseOrValue<BigNumberish> | null,
      calculatedFeeAmount?: null,
      donationAmount?: null,
      timestamp?: null
    ): FundedEventFilter;
  };

  estimateGas: {
    getCosts(overrides?: CallOverrides): Promise<BigNumber>;

    getStocks(overrides?: CallOverrides): Promise<BigNumber>;

    goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    makeDonation(
      option: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    projDescription(overrides?: CallOverrides): Promise<BigNumber>;

    projTitle(overrides?: CallOverrides): Promise<BigNumber>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getCosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeDonation(
      option: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projTitle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
